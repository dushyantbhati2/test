// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Auth Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]
  activityLogs  ActivityLog[]
  firstName         String?
  lastName          String?
  profilePicture    String?
  phone             String?
  lastLogin         DateTime?
  isActive          Boolean             @default(true)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  notifications     Notification[]
  employee          Employee?
  journalEntries    JournalEntry[]      @relation("CreatedBy")
  approvedJournals  JournalEntry[]      @relation("ApprovedBy")
  permissions       UserPermission[]

  Invoice Invoice[]
}

enum UserRole {
  USER
  ADMIN
  MANAGER
}

model Permission {
  id          String            @id @default(cuid())
  name        String            @unique
  description String?
  module      String
  action      String            // CREATE, READ, UPDATE, DELETE, APPROVE
  users       UserPermission[]
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}

model UserPermission {
  id           String     @id @default(cuid())
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissionId String
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  @@unique([userId, permissionId])
}

// Company Profile
model CompanyProfile {
  id                String    @id @default(cuid())
  name              String
  logo              String?
  address           String?
  city              String?
  state             String?
  postalCode        String?
  country           String?
  phone             String?
  email             String?
  website           String?
  gstNumber         String?
  panNumber         String?
  msmeNumber        String?
  bankName          String?
  accountNumber     String?
  ifscCode          String?
  branchName        String?
  fiscalYearStart   DateTime?
  taxIdentificationNumber String?
  currency          String?   @default("USD")
  dateFormat        String?   @default("MM/DD/YYYY")
  headerImagePath   String?
  footerImagePath   String?
  // Marine specific fields
  imoNumber         String?   // International Maritime Organization number
  classificationSociety String? // DNV GL, Lloyd's Register, etc.
  marineRegistration String?
  designCapabilities String? // Types of vessels the company can design
  certifications    String?   // ISO certifications, etc.
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

// System Settings
model SystemSetting {
  id          String    @id @default(cuid())
  key         String    @unique
  value       String
  description String?
  group       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

// Purchase Models
model Vendor {
  id            String   @id @default(cuid())
  name          String
  contactPerson String?
  email         String?
  phone         String?
  address       String?
  gstNumber     String?
  panNumber     String?
  bankDetails   String?
  paymentTerms  Int?
  pos           PO[]
  bills         Bill[]
  expenses      Expense[]
  payments      VendorPayment[]
  ledgerAccountId String?
  ledgerAccount ChartOfAccount? @relation(fields: [ledgerAccountId], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  debitNotes  DebitNote[]
}

model PO {
  id            String   @id @default(cuid())
  poNumber      String   @unique
  date          DateTime
  vendorId      String
  vendor        Vendor   @relation(fields: [vendorId], references: [id])
  projectId     String?
  project       Project? @relation(fields: [projectId], references: [id])
  subtotal      Float
  tax           Float
  total         Float
  notes         String?
  status        String   @default("DRAFT") // DRAFT, SENT, RECEIVED, CANCELLED
  items         POItem[]
  bills         Bill[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}

model POItem {
  id            String   @id @default(cuid())
  poId          String
  po            PO       @relation(fields: [poId], references: [id], onDelete: Cascade)
  description   String
  quantity      Float
  unitPrice     Float
  tax           Float
  total         Float
  hsn           String?
  sacCode       String?
  accountId   String?
  account     ChartOfAccount? @relation(fields: [accountId], references: [id])
}

model Bill {
  id            String   @id @default(cuid())
  billNumber    String   @unique
  date          DateTime
  dueDate       DateTime
  vendorId      String
  vendor        Vendor   @relation(fields: [vendorId], references: [id])
  poId          String?
  po            PO?      @relation(fields: [poId], references: [id])
  subtotal      Float
  tax           Float
  total         Float
  amountPaid    Float    @default(0)
  amountDue     Float
  notes         String?
  status        String   @default("UNPAID") // UNPAID, PARTIAL, PAID, OVERDUE
  items         BillItem[]
  payments      VendorPayment[]
  journalEntryId String?
  journalEntry  JournalEntry? @relation(fields: [journalEntryId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}

model BillItem {
  id            String   @id @default(cuid())
  billId        String
  bill          Bill     @relation(fields: [billId], references: [id], onDelete: Cascade)
  description   String
  quantity      Float
  unitPrice     Float
  tax           Float
  total         Float
  hsn           String?
  sacCode       String?
  accountId   String?
  account     ChartOfAccount? @relation(fields: [accountId], references: [id])
}

model Expense {
  id            String   @id @default(cuid())
  date          DateTime
  vendorId      String
  vendor        Vendor   @relation(fields: [vendorId], references: [id])
  category      String
  amount        Float
  description   String?
  reference     String?
  projectId     String?
  project       Project? @relation(fields: [projectId], references: [id])
  accountId     String?
  account       ChartOfAccount? @relation(fields: [accountId], references: [id])
  journalEntryId String?
  journalEntry JournalEntry? @relation(fields: [journalEntryId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}

model DebitNote {
  id          String    @id @default(cuid())
  debitNumber String    @unique
  date        DateTime
  vendorId    String
  vendor      Vendor    @relation(fields: [vendorId], references: [id])
  amount      Float
  reason      String
  notes       String?
  journalEntryId String?
  journalEntry JournalEntry? @relation(fields: [journalEntryId], references: [id])
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model VendorPayment {
  id            String   @id @default(cuid())
  date          DateTime
  amount        Float
  paymentMethod String
  reference     String?
  notes         String?
  billId        String?
  bill          Bill?     @relation(fields: [billId], references: [id])
  vendorId      String
  vendor        Vendor   @relation(fields: [vendorId], references: [id])
  accountId   String?
  account     ChartOfAccount? @relation(fields: [accountId], references: [id])
  journalEntryId String?
  journalEntry JournalEntry? @relation(fields: [journalEntryId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}

// Customer Models
model Customer {
  id           String    @id @default(cuid())
  customerType String    @default("company") // company or individual
  companyName  String?
  firstName    String?
  lastName     String?
  gstNumber    String?
  panNumber    String?
  gstState     String?
  gstType      String?   @default("Regular")
  creditTerms  Int       @default(30)
  creditLimit  Float     @default(0)
  email        String?
  phone        String?
  contacts     CustomerContact[]
  billingAddressId String?
  billingAddress Address? @relation("BillingAddress", fields: [billingAddressId], references: [id])
  shippingAddressId String?
  shippingAddress Address? @relation("ShippingAddress", fields: [shippingAddressId], references: [id])
  invoices     Invoice[]
  quotations   Quotation[]
  inquiries    Inquiry[]
  projects     Project[]
  vessels      Vessel[]
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  taxRate         Float?
  ledgerAccountId String?
  ledgerAccount   ChartOfAccount?   @relation(fields: [ledgerAccountId], references: [id])
  addressLine1    String?
  addressLine2    String?
  city            String?
  state           String?
  postalCode      String?
  country         String?
  fleetSize       Int?              // Number of vessels owned
  vesselTypes     String?           // Types of vessels owned
  operatingRegions String?          // Regions where they operate
  classificationSociety String?     // Their preferred classification society
  deliveryChallans DeliveryChallan[]
  creditNotes     CreditNote[]
  payments        CustomerPayment[]
}

model CustomerContact {
  id              String    @id @default(cuid())
  customerId      String
  customer        Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  title           String?
  firstName       String
  lastName        String?
  designation     String?
  email           String?
  phone           String?
  alternatePhone  String?
  isPrimary       Boolean   @default(false)
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Address {
  id            String   @id @default(cuid())
  addressLine1  String
  addressLine2  String?
  city          String
  state         String
  postalCode    String
  country       String
  billingCustomers Customer[] @relation("BillingAddress")
  shippingCustomers Customer[] @relation("ShippingAddress")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}

// Marine Vessel Model
model Vessel {
  id                  String   @id @default(cuid())
  vesselName          String
  imoNumber           String?
  vesselType          String
  flag                String?
  classificationSociety String?
  classNotation       String?
  buildYear           Int?
  shipyard            String?
  length              Float?
  breadth             Float?
  depth               Float?
  grossTonnage        Float?
  netTonnage          Float?
  deadweight          Float?
  customerId          String
  customer            Customer @relation(fields: [customerId], references: [id])
  projects            Project[]
  quotations          Quotation[]
  invoices            Invoice[]
  deliveryChallans    DeliveryChallan[]
  inquiries           Inquiry[]
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now())
  operatingRegions String?          // Regions where they operate
}

model Quotation {
  id            String   @id @default(cuid())
  quotationNumber String @unique
  date          DateTime
  validUntil    DateTime
  customerId    String
  customer      Customer @relation(fields: [customerId], references: [id])
  projectId     String?
  project       Project? @relation(fields: [projectId], references: [id])
  subtotal      Float
  tax           Float
  total         Float
  notes         String?
  status        String   @default("DRAFT") // DRAFT, SENT, ACCEPTED, REJECTED
  items         QuotationItem[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  vesselId        String?
  vessel          Vessel?         @relation(fields: [vesselId], references: [id])
  termsAndConditions String?
  cgst            Float?
  sgst            Float?
  igst            Float?
  placeOfSupply   String?
  designScope     String?         // Scope of design work
  deliveryLocation String?        // Where plans will be delivered
  revisionRounds  Int?            // Number of revision rounds included
}

model QuotationItem {
  id            String   @id @default(cuid())
  quotationId   String
  quotation     Quotation @relation(fields: [quotationId], references: [id], onDelete: Cascade)
  description   String
  quantity      Float
  unitPrice     Float
  tax           Float
  total         Float
  hsn           String?
  sacCode       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  planType        String? // Type of marine plan
  accountId       String?
  account         ChartOfAccount? @relation(fields: [accountId], references: [id])
  deliveryDays    Int?      // Days to deliver this item
  revisions       Int?      // Number of revisions included
}

model Invoice {
  id                   String        @id @default(cuid())
  invoiceNumber        String        @unique
  date                 DateTime
  dueDate              DateTime
  customerId           String
  customer             Customer      @relation(fields: [customerId], references: [id])
  projectId            String?
  project              Project?      @relation(fields: [projectId], references: [id])
  items                InvoiceItem[]
  subtotal             Decimal       @default(0)
  tax                  Decimal       @default(0)
  total                Decimal       @default(0)
  notes                String?
  termsAndConditions   String?
  status               InvoiceStatusEnum @default(DRAFT)
  poNumber             String?
  vesselName           String?
  placeOfSupply        String?
  ourReference         String?
  cgst                 Decimal       @default(0)
  sgst                 Decimal       @default(0)
  igst                 Decimal       @default(0)
  paymentTerms         String        @default("Net 30")
  paymentDue           Int           @default(30)
  isRecurring          Boolean       @default(false)
  recurringFrequency   String?
  recurringEndDate     DateTime?
  discountType         String        @default("PERCENTAGE")
  discountValue        Decimal       @default(0)
  discountAmount       Decimal       @default(0)
  shippingAmount       Decimal       @default(0)
  adjustmentLabel      String?
  adjustmentAmount     Decimal       @default(0)
  contactPerson        String?
  payments             Payment[]
  createdAt            DateTime      @default(now())
  updatedAt            DateTime      @updatedAt
  createdBy            String?
  createdByUser        User?         @relation(fields: [createdBy], references: [id])
  vesselId             String?
  vessel               Vessel?       @relation(fields: [vesselId], references: [id])
  customerPayments     CustomerPayment[]
  journalEntries       JournalEntry[]

  @@map("invoices")
}

model Payment {
  id            String   @id @default(cuid())
  invoiceId     String
  invoice       Invoice  @relation(fields: [invoiceId], references: [id])
  amount        Decimal
  date          DateTime
  method        String?
  reference     String?
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

enum InvoiceStatusEnum {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

model InvoiceItem {
  id            String   @id @default(cuid())
  invoiceId     String
  invoice       Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  description   String
  quantity      Float
  unitPrice     Float
  tax           Float
  total         Float
  hsn           String?
  sacCode       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  planType        String? // Type of marine plan
  accountId       String?
  account         ChartOfAccount? @relation(fields: [accountId], references: [id])
}

model DeliveryChallan {
  id                String    @id @default(cuid())
  challanNumber     String    @unique
  date              DateTime
  customerId        String
  customer          Customer  @relation(fields: [customerId], references: [id])
  vesselId          String?
  vessel            Vessel?   @relation(fields: [vesselId], references: [id])
  items             ChallanItem[]
  notes             String?
  projectId         String?
  project           Project?  @relation(fields: [projectId], references: [id])
  deliveryMethod    String?   // Email, Physical, Portal, etc.
  deliveryAddress   String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now())
}

model ChallanItem {
  id                String          @id @default(cuid())
  challanId         String
  challan           DeliveryChallan @relation(fields: [challanId], references: [id], onDelete: Cascade)
  description       String
  planType          String?       // Type of marine plan
  quantity          Float
  drawingNumber     String?         // Drawing/Plan number
  revision          String?         // Revision number
}

model CreditNote {
  id                String    @id @default(cuid())
  creditNumber      String    @unique
  date              DateTime
  customerId        String
  customer          Customer  @relation(fields: [customerId], references: [id])
  amount            Float
  reason            String
  notes             String?
  journalEntryId    String?
  journalEntry      JournalEntry? @relation(fields: [journalEntryId], references: [id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @default(now())
}

model CustomerPayment {
  id            String   @id @default(cuid())
  date          DateTime
  amount        Float
  paymentMethod String
  reference     String?
  notes         String?
  invoiceId     String?
  invoice       Invoice?  @relation(fields: [invoiceId], references: [id])
  customerId        String
  customer          Customer      @relation(fields: [customerId], references: [id])
  accountId         String?
  account           ChartOfAccount? @relation(fields: [accountId], references: [id])
  journalEntryId    String?
  journalEntry      JournalEntry? @relation(fields: [journalEntryId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}

model Inquiry {
  id            String   @id @default(cuid())
  subject       String
  description   String
  status        String   @default("NEW") // NEW, IN_PROGRESS, CLOSED
  priority      String   @default("MEDIUM") // LOW, MEDIUM, HIGH
  customerId    String
  customer      Customer @relation(fields: [customerId], references: [id])
  assignedToId  String?
  assignedTo    Employee? @relation(fields: [assignedToId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  date              DateTime
  notes             String?
  requirements      String?
  source            String?       @default("WEBSITE")
  expectedBudget    Float?
  expectedTimeline  String?
  followUpDate      DateTime?
  vesselId          String?
  vessel            Vessel?   @relation(fields: [vesselId], references: [id])
  vesselType        String?
  designScope       String?       // What type of design work needed
  urgency           String?       // Normal, Urgent, Critical
  regulatoryBody    String?       // DG Shipping, IRS, etc.
}

// HR Management Tables
model Employee {
  id            String   @id @default(cuid())
  firstName         String
  lastName          String
  email             String   @unique
  jobTitle          String
  department        String
  basicSalary       Float?
  hourlyRate        Float?
  reportingManagerId String?
  reportingManager   Employee? @relation("EmployeeToManager", fields: [reportingManagerId], references: [id])
  directReports     Employee[] @relation("EmployeeToManager")
  employmentType    String   @default("FULL_TIME") // FULL_TIME, PART_TIME, CONTRACT
  phoneNumber       String?
  address           String?
  tasks             Task[]
  timeEntries       TimeEntry[]
  attendances       Attendance[]
  payrolls          Payroll[]
  leaveRequests     LeaveRequest[]
  approvedLeaves    LeaveRequest[] @relation("LeaveApprover")
  inquiries         Inquiry[]
  userId              String?   @unique
  user                User?     @relation(fields: [userId], references: [id])
  employeeId          String    @unique
  position            String
  employeeType        String    // Full-time, Part-time, Contract, etc.
  joiningDate         DateTime
  terminationDate     DateTime?
  status              String    @default("ACTIVE") // ACTIVE, INACTIVE, ON_LEAVE, TERMINATED
  emergencyContactName String?
  emergencyContactPhone String?
  addressLine1        String?
  addressLine2        String?
  city                String?
  state                String?
  postalCode          String?
  country             String?
  bankName            String?
  accountNumber       String?
  ifscCode            String?
  panNumber           String?
  aadharNumber        String?
  notes               String?
  marineExperience    Int?      // Years of marine industry experience
  certifications      String?   // Marine certifications
  specialization      String?   // Naval Architecture, Marine Engineering, etc.
  licenseNumber       String?   // Professional license number
  documents           EmployeeDocument[]
  skills              EmployeeSkill[]
  expenseClaims       ExpenseClaim[]
  approvedExpenses    ExpenseClaim[] @relation("ExpenseApprover")
  projectManaged      Project[] @relation("ProjectManager")
  projectTeams        ProjectTeamMember[]
  assignedTasks       Task[] @relation("TaskAssignee")
  approvedTimeEntries TimeEntry[] @relation("TimeApprover")
  uploadedDocuments   ProjectDocument[] @relation("DocumentUploader")
  reportedIssues      ProjectIssue[] @relation("IssueReporter")
  assignedIssues      ProjectIssue[] @relation("IssueAssignee")
  comments            TaskComment[] @relation("CommentAuthor")
  equipmentAssigned   EquipmentAssignment[] @relation("EquipmentAssignee")
  equipmentAssignedBy EquipmentAssignment[] @relation("EquipmentAssigner")
  trainingParticipations TrainingParticipant[]
  performanceReviews  PerformanceReview[] @relation("EmployeeReviewed")
  conductedReviews    PerformanceReview[] @relation("Reviewer")
  planApprovals       PlanApproval[] @relation("ApprovedBy")
  planSubmissions     PlanApproval[] @relation("SubmittedBy")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  TaskAttachment TaskAttachment[]
}

model EmployeeDocument {
  id            String   @id @default(cuid())
  employeeId    String
  employee      Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  documentType  String   // Resume, Contract, Certificate, ID Proof, etc.
  documentName  String
  documentPath  String
  uploadDate    DateTime @default(now())
  expiryDate    DateTime?
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Skill {
  id          String         @id @default(cuid())
  name        String         @unique
  category    String         // Technical, Soft Skills, Software, etc.
  description String?
  employees   EmployeeSkill[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model EmployeeSkill {
  id                String   @id @default(cuid())
  employeeId        String
  employee          Employee @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  skillId           String
  skill             Skill    @relation(fields: [skillId], references: [id], onDelete: Cascade)
  proficiencyLevel  Int      // 1-5 scale
  yearsOfExperience Float?
  isCertified       Boolean  @default(false)
  certificationName String?
  certificationDate DateTime?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@unique([employeeId, skillId])
}

model Attendance {
  id            String   @id @default(cuid())
  date          DateTime
  checkIn       DateTime?
  checkOut      DateTime?
  status        String   @default("PRESENT") // PRESENT, ABSENT, HALF_DAY, LEAVE
  notes         String?
  employeeId    String
  employee      Employee @relation(fields: [employeeId], references: [id])
  checkInTime DateTime?
  checkOutTime DateTime?
  workHours   Float?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@unique([employeeId, date])
}

model Payroll {
  id            String   @id @default(cuid())
  employeeId    String
  employee      Employee @relation(fields: [employeeId], references: [id])
  periodStart   DateTime
  periodEnd     DateTime
  basicSalary   Float
  allowances    Float
  deductions    Float
  netSalary     Float
  paymentDate   DateTime?
  paymentStatus String   @default("PENDING") // PENDING, PAID
  notes         String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  payrollPeriodId String
  payrollPeriod   PayrollPeriod @relation(fields: [payrollPeriodId], references: [id])
  overtimePay     Float         @default(0)
  bonus           Float         @default(0)
  taxDeductions   Float         @default(0)
  paymentMethod   String?       // BANK_TRANSFER, CHECK, CASH
  paymentReference String?
  journalEntryId  String?
  journalEntry    JournalEntry? @relation(fields: [journalEntryId], references: [id])

  @@unique([employeeId, payrollPeriodId])
}

model LeaveType {
  id            String   @id @default(cuid())
  name          String
  description   String?
  allowedDays   Int
  isPaid        Boolean  @default(true)
  leaveRequests LeaveRequest[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}

model LeaveRequest {
  id            String   @id @default(cuid())
  employeeId    String
  employee      Employee @relation(fields: [employeeId], references: [id])
  leaveTypeId   String
  leaveType     LeaveType @relation(fields: [leaveTypeId], references: [id])
  startDate     DateTime
  endDate       DateTime
  totalDays     Float
  reason        String?
  status        String   @default("PENDING") // PENDING, APPROVED, DENIED
  approvedById  String?
  approvedBy    Employee? @relation("LeaveApprover", fields: [approvedById], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  approvedDate  DateTime?
  rejectionReason String?
}

model PayrollPeriod {
  id        String    @id @default(cuid())
  name      String    @unique
  startDate DateTime  @db.Date
  endDate   DateTime  @db.Date
  status    String    @default("DRAFT") // DRAFT, PROCESSING, COMPLETED
  payrolls  Payroll[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
}

model ExpenseClaim {
  id              String            @id @default(cuid())
  employeeId      String
  employee        Employee          @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  claimNumber     String            @unique
  claimDate       DateTime
  totalAmount     Float
  description     String?
  status          String            @default("PENDING") // PENDING, APPROVED, REJECTED, PAID
  approvedById    String?
  approvedBy      Employee?         @relation("ExpenseApprover", fields: [approvedById], references: [id])
  approvedDate    DateTime?
  paidDate        DateTime?
  rejectionReason String?
  notes           String?
  items           ExpenseClaimItem[]
  journalEntryId  String?
  journalEntry    JournalEntry?     @relation(fields: [journalEntryId], references: [id])
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
}

model ExpenseClaimItem {
  id              String        @id @default(cuid())
  expenseClaimId  String
  expenseClaim    ExpenseClaim  @relation(fields: [expenseClaimId], references: [id], onDelete: Cascade)
  expenseDate     DateTime      @db.Date
  expenseCategory String        // Travel, Meals, Accommodation, Office Supplies, etc.
  description     String
  amount          Float
  receiptPath     String?
  notes           String?
  accountId       String?
  account         ChartOfAccount? @relation(fields: [accountId], references: [id])
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

// Marine Project Management Tables
model Project {
  id            String   @id @default(cuid())
  name          String
  description   String?
  startDate     DateTime
  endDate       DateTime?
  status        String   @default("ACTIVE") // ACTIVE, COMPLETED, ON_HOLD, CANCELLED
  budget        Float?
  customerId    String
  customer      Customer @relation(fields: [customerId], references: [id])
  tasks         Task[]
  timeEntries   TimeEntry[]
  invoices      Invoice[]
  quotations    Quotation[]
  pos           PO[]
  expenses      Expense[]
  vesselId      String?
  vessel        Vessel?  @relation(fields: [vesselId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  projectCode       String              @unique
  targetEndDate     DateTime
  actualEndDate     DateTime?
  actualCost        Float?              @default(0)
  priority          String              @default("MEDIUM")
  projectManagerId  String?
  projectManager    Employee?           @relation("ProjectManager", fields: [projectManagerId], references: [id])
  notes             String?
  vesselType        String?
  designPhase       String              @default("CONCEPT")
  regulatoryBody    String?             // DG Shipping, IRS, Lloyd's Register, etc.
  classificationSociety String?
  projectType       String              @default("NEW_DESIGN")
  contractValue     Float?
  milestonePayments Boolean             @default(false)
  deliveryTerms     String?             // Delivery terms and conditions
  teamMembers       ProjectTeamMember[]
  phases            ProjectPhase[]
  deliverables      ProjectDeliverable[]
  documents         ProjectDocument[]
  issues            ProjectIssue[]
  comments          TaskComment[]
  billings          ProjectBilling[]
  deliveryChallans  DeliveryChallan[]
  planApprovals     PlanApproval[]
}

model ProjectTeamMember {
  id              String    @id @default(cuid())
  projectId       String
  project         Project   @relation(fields: [projectId], references: [id], onDelete: Cascade)
  employeeId      String
  employee        Employee  @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  role            String    // Project Manager, Naval Architect, Marine Engineer, Draftsman, etc.
  joinDate        DateTime  @default(now())
  exitDate        DateTime?
  allocation      Int       @default(100) // Percentage of time allocated to this project
  hourlyRate      Float?    // Override employee's default rate if needed
  responsibilities String?  // Specific responsibilities
  notes           String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  @@unique([projectId, employeeId])
}

model ProjectPhase {
  id                  String              @id @default(cuid())
  projectId           String
  project             Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  name                String              // Concept Design, Preliminary Design, Detailed Design, Approval, etc.
  description         String?
  phaseType           String
  startDate           DateTime
  targetEndDate       DateTime
  actualEndDate       DateTime?
  status              String              @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED, DELAYED
  completionPercentage Int                @default(0)
  budget              Float?
  actualCost          Float?              @default(0)
  notes               String?
  tasks               Task[]
  deliverables        ProjectDeliverable[]
  approvals           PlanApproval[]
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
}

// Enhanced Task model for marine projects
model Task {
  id            String   @id @default(cuid())
  title         String
  description   String?
  status        String   @default("TODO") // TODO, IN_PROGRESS, IN_REVIEW, COMPLETED
  priority      String   @default("MEDIUM") // LOW, MEDIUM, HIGH
  dueDate       DateTime?
  assigneeId    String?
  assignee      Employee? @relation(fields: [assigneeId], references: [id])
  projectId     String
  project       Project  @relation(fields: [projectId], references: [id])
  timeEntries   TimeEntry[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  taskNumber        String              @unique
  phaseId           String?
  phase             ProjectPhase?       @relation(fields: [phaseId], references: [id])
  taskType          String              @default("DESIGN")
  planType          String?             // If it's a plan/drawing task
  assignedToId      String?
  assignedTo        Employee?           @relation("TaskAssignee", fields: [assignedToId], references: [id])
  estimatedHours    Float?
  actualHours       Float?
  startDate         DateTime?
  completedDate     DateTime?
  completionPercentage Int              @default(0)
  notes             String?
  drawingNumber     String?             // Drawing/Plan number
  revision          String?             @default("A") // Revision number
  approvalRequired  Boolean             @default(false)
  regulatoryBody    String?             // Which body needs to approve
  dependencies      String?             // Task dependencies
  comments          TaskComment[]
  attachments       TaskAttachment[]
}

model TaskComment {
  id                String              @id @default(cuid())
  taskId            String
  task              Task                @relation(fields: [taskId], references: [id], onDelete: Cascade)
  authorId          String
  author            Employee            @relation("CommentAuthor", fields: [authorId], references: [id])
  content           String
  commentType       String              @default("GENERAL") // GENERAL, REVIEW, APPROVAL, ISSUE
  isInternal        Boolean             @default(true) // Internal or client-facing
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  
  // Add relation to project for easier querying
  projectId         String?
  project           Project?            @relation(fields: [projectId], references: [id])
}

model TaskAttachment {
  id                String              @id @default(cuid())
  taskId            String
  task              Task                @relation(fields: [taskId], references: [id], onDelete: Cascade)
  fileName          String
  filePath          String
  fileSize          Int?
  fileType          String?
  uploadedById      String
  uploadedBy        Employee            @relation(fields: [uploadedById], references: [id])
  uploadedAt        DateTime            @default(now())
  description       String?
  version           String?             @default("1.0")
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model ProjectDeliverable {
  id                String              @id @default(cuid())
  projectId         String
  project           Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  phaseId           String?
  phase             ProjectPhase?       @relation(fields: [phaseId], references: [id])
  name              String
  description       String?
  deliverableType   String              // Drawing, Report, Model, etc.
  planType          String?             // Type of marine plan
  status            String              @default("PENDING") // PENDING, IN_PROGRESS, COMPLETED, DELIVERED
  dueDate           DateTime?
  deliveredDate     DateTime?
  filePath          String?
  drawingNumber     String?             // Drawing/Plan number
  revision          String?             @default("A")
  approvalStatus    String              @default("NOT_SUBMITTED")
  notes             String?
  
  // Drawing Register specific fields
  irsProjectId      String?             // IRS Project ID
  irsPassword       String?             // IRS Password
  documentNumber    String?             // Document/Plan Number
  latestRevision    String?             @default("A")
  planCategory      String?             // Plan Category
  transmittalDate   DateTime?           // Transmittal Date
  submittedDate     DateTime?           // Submitted Date
  approvedDate      DateTime?           // Approved Date
  reminderDays      Int?                // Reminder Days
  remarks           String?             // Remarks
  invoiceRaised     Boolean             @default(false)
  planMadeBy        String?             // Plan Made By
  planWithIRS       String?             // Plan With (in IRS)
  contactDetails    String?             // Contact Details
  
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model ProjectDocument {
  id                String              @id @default(cuid())
  projectId         String
  project           Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  name              String
  description       String?
  documentType      String              // Contract, Specification, Drawing, etc.
  filePath          String
  fileSize          Int?
  uploadedById      String
  uploadedBy        Employee            @relation("DocumentUploader", fields: [uploadedById], references: [id])
  uploadDate        DateTime            @default(now())
  version           String              @default("1.0")
  isActive          Boolean             @default(true)
  isConfidential    Boolean             @default(false)
  notes             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model ProjectIssue {
  id                String              @id @default(cuid())
  projectId         String
  project           Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  title             String
  description       String
  issueType         String              // Bug, Feature Request, Task, etc.
  priority          String              @default("MEDIUM") // LOW, MEDIUM, HIGH, CRITICAL
  status            String              @default("OPEN") // OPEN, IN_PROGRESS, RESOLVED, CLOSED
  reportedById      String
  reportedBy        Employee            @relation("IssueReporter", fields: [reportedById], references: [id])
  assignedToId      String?
  assignedTo        Employee?           @relation("IssueAssignee", fields: [assignedToId], references: [id])
  reportedDate      DateTime            @default(now())
  resolvedDate      DateTime?
  notes             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model ProjectBilling {
  id                String              @id @default(cuid())
  projectId         String
  project           Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  billingDate       DateTime
  amount            Float
  description       String?
  milestoneId       String?             // If linked to a milestone
  status            String              @default("PENDING") // PENDING, INVOICED, PAID
  invoiceId         String?
  notes             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model TimeEntry {
  id            String   @id @default(cuid())
  date          DateTime
  hours         Float
  description   String?
  employeeId    String
  employee      Employee @relation(fields: [employeeId], references: [id])
  projectId     String
  project       Project  @relation(fields: [projectId], references: [id])
  taskId        String?
  task          Task?    @relation(fields: [taskId], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  startTime         DateTime?
  endTime           DateTime?
  workType          String?             // Design, Drawing, Review, Meeting, etc.
  billableHours     Float?
  hourlyRate        Float?
  status            String              @default("PENDING") // PENDING, APPROVED, INVOICED
  approvedById      String?
  approvedBy        Employee?           @relation("TimeApprover", fields: [approvedById], references: [id])
  approvedDate      DateTime?
  notes             String?
}

// Marine Plan Approval System
model PlanApproval {
  id                String              @id @default(cuid())
  projectId         String
  project           Project             @relation(fields: [projectId], references: [id], onDelete: Cascade)
  phaseId           String?
  phase             ProjectPhase?       @relation(fields: [phaseId], references: [id])
  planName          String
  planType          String
  drawingNumber     String
  revision          String              @default("A")
  submittedToBody   String              // DG Shipping, IRS, Lloyd's Register, etc.
  submittedById     String
  submittedBy       Employee            @relation("SubmittedBy", fields: [submittedById], references: [id])
  submittedDate     DateTime
  approvalStatus    String              @default("SUBMITTED")
  approvedById      String?
  approvedBy        Employee?           @relation("ApprovedBy", fields: [approvedById], references: [id])
  approvedDate      DateTime?
  rejectedDate      DateTime?
  rejectionReason   String?
  comments          String?
  approvalNumber    String?             // Official approval number from regulatory body
  validUntil        DateTime?           // Approval validity
  filePath          String?             // Path to approved plan
  notes             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

// Additional HR models
model Equipment {
  id                String              @id @default(cuid())
  name              String
  description       String?
  equipmentType     String              // Laptop, Desktop, Software License, etc.
  serialNumber      String?
  purchaseDate      DateTime?
  purchasePrice     Float?
  warrantyExpiry    DateTime?
  status            String              @default("AVAILABLE") // AVAILABLE, ASSIGNED, MAINTENANCE, RETIRED
  assignments       EquipmentAssignment[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model EquipmentAssignment {
  id                String              @id @default(cuid())
  equipmentId       String
  equipment         Equipment           @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
  employeeId        String
  employee          Employee            @relation("EquipmentAssignee", fields: [employeeId], references: [id])
  assignedById      String
  assignedBy        Employee            @relation("EquipmentAssigner", fields: [assignedById], references: [id])
  assignedDate      DateTime            @default(now())
  returnedDate      DateTime?
  condition         String?             // Good, Fair, Poor
  notes             String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model Training {
  id                String              @id @default(cuid())
  title             String
  description       String?
  trainingType      String              // Internal, External, Online, etc.
  startDate         DateTime
  endDate           DateTime
  location          String?
  instructor        String?
  maxParticipants   Int?
  cost              Float?
  status            String              @default("SCHEDULED") // SCHEDULED, IN_PROGRESS, COMPLETED, CANCELLED
  participants      TrainingParticipant[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model TrainingParticipant {
  id                String              @id @default(cuid())
  trainingId        String
  training          Training            @relation(fields: [trainingId], references: [id], onDelete: Cascade)
  employeeId        String
  employee          Employee            @relation(fields: [employeeId], references: [id], onDelete: Cascade)
  registrationDate  DateTime            @default(now())
  attendanceStatus  String              @default("REGISTERED") // REGISTERED, ATTENDED, ABSENT, CANCELLED
  completionStatus  String?             // COMPLETED, FAILED, IN_PROGRESS
  certificateIssued Boolean             @default(false)
  feedback          String?
  rating            Int?                // 1-5 scale
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt

  @@unique([trainingId, employeeId])
}

model PerformanceReview {
  id                String              @id @default(cuid())
  employeeId        String
  employee          Employee            @relation("EmployeeReviewed", fields: [employeeId], references: [id], onDelete: Cascade)
  reviewerId        String
  reviewer          Employee            @relation("Reviewer", fields: [reviewerId], references: [id])
  reviewPeriodStart DateTime
  reviewPeriodEnd   DateTime
  overallRating     Float?              // 1-5 scale
  goals             String?
  achievements      String?
  areasForImprovement String?
  feedback          String?
  status            String              @default("DRAFT") // DRAFT, SUBMITTED, APPROVED
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

// Accounting models
model ChartOfAccount {
  id                String              @id @default(cuid())
  accountCode       String              @unique
  accountName       String
  accountType       String              // ASSET, LIABILITY, EQUITY, REVENUE, EXPENSE
  parentAccountId   String?
  parentAccount     ChartOfAccount?     @relation("AccountHierarchy", fields: [parentAccountId], references: [id])
  subAccounts       ChartOfAccount[]    @relation("AccountHierarchy")
  description       String?
  isActive          Boolean             @default(true)
  balance           Float               @default(0)
  customers         Customer[]
  vendors           Vendor[]
  journalEntries    JournalEntryLine[]
  quotationItems    QuotationItem[]
  invoiceItems      InvoiceItem[]
  billItems         BillItem[]
  poItems           POItem[]
  expenses          Expense[]
  customerPayments  CustomerPayment[]
  vendorPayments    VendorPayment[]
  expenseClaimItems ExpenseClaimItem[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model JournalEntry {
  id                String              @id @default(cuid())
  entryNumber       String              @unique
  date              DateTime
  description       String
  reference         String?
  totalDebit        Float
  totalCredit       Float
  status            String              @default("DRAFT") // DRAFT, POSTED, REVERSED
  createdById       String
  createdBy         User                @relation("CreatedBy", fields: [createdById], references: [id])
  approvedById      String?
  approvedBy        User?               @relation("ApprovedBy", fields: [approvedById], references: [id])
  approvedDate      DateTime?
  lines             JournalEntryLine[]
  invoices          Invoice[]
  bills             Bill[]
  customerPayments  CustomerPayment[]
  vendorPayments    VendorPayment[]
  expenses          Expense[]
  creditNotes       CreditNote[]
  debitNotes        DebitNote[]
  payrolls          Payroll[]
  expenseClaims     ExpenseClaim[]
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

model JournalEntryLine {
  id                String              @id @default(cuid())
  journalEntryId    String
  journalEntry      JournalEntry        @relation(fields: [journalEntryId], references: [id], onDelete: Cascade)
  accountId         String
  account           ChartOfAccount      @relation(fields: [accountId], references: [id])
  description       String?
  debitAmount       Float               @default(0)
  creditAmount      Float               @default(0)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

// Notification system
model Notification {
  id                String              @id @default(cuid())
  userId            String
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  title             String
  message           String
  type              String              @default("INFO") // INFO, WARNING, ERROR, SUCCESS
  isRead            Boolean             @default(false)
  actionUrl         String?
  relatedEntityType String?
  relatedEntityId   String?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

// Activity logging
model ActivityLog {
  id            String   @id @default(cuid())
  userId        String
  user          User     @relation(fields: [userId], references: [id])
  action        String   // CREATE, UPDATE, DELETE, LOGIN, etc.
  entityType    String   // CUSTOMER, INVOICE, PROJECT, etc.
  entityId      String
  description   String
  createdAt     DateTime @default(now())
  ipAddress         String?
  userAgent         String?
}

// System Models
model Settings {
  id            String   @id @default(cuid())
  key           String   @unique
  value         String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
}
